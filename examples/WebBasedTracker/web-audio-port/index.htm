<html>
  <head>

    <title>What in the name of...?</title>
    
    <script src="squawksynth.js"></script>
    <script src="webaudio.js"></script>
    <script src="converter.js"></script>
    <script src="squawkstream.js"></script>
    
    <script language="JavaScript">

      // Configuration
      var emulateSampleRate = 16000.0;  // Emulation sample rate
      var masterVolume      = 1.0;      // Master volume

      // Note to self: Addresses could (should?) be derived from RETs (at expense of RAM)
      
      // Synthesizer topology
      var music = [  // A) Sample music =>
                                      // setup bytes 11
        0x03,                         // Number of tracks
        0x00, 0x00,                   // Address of track 0
        0x03, 0x00,                   // Address of track 1
        0x0C, 0x00,                   // Address of track 2
        0x01,                         // Channel 0 entry track (PULSE)
        0x00,                         // Channel 1 entry track (SQUARE)
        0x00,                         // Channel 2 entry track (TRIANGLE)
        0x00,                         // Channel 3 entry track (NOISE)

        "Track 0",                   // ticks = 0, bytes = 3
        0x40, 0,                      // FX: SET VOLUME: volume = 0
        0xFE,                         // RETURN (empty track used for silent channels)

        "Track 1",                   // ticks = 768, bytes = 9
        0x40, 0,                      // FX: SET VOLUME: volume = 0
        0x42, 2, 24,                  // FX: VOLUME SLIDE ON: steps = 2 / every ticks = 24
        0xFD, 31, 2,                  // REPEAT: count = 32 - track = 2 (32 * 24 ticks)
        0xFE,                         // RETURN

        "Track 2",                   // ticks = 24, bytes = 13
        0x00 +  37,                   // NOTE ON: note = 37
        0x9F +  4,                    // DELAY: ticks = 4
        0x00,                         // NOTE OFF
        0x9F +  4,                    // DELAY: ticks = 4
        0x00 +  41,                   // NOTE ON: note = 41
        0x9F +  4,                    // DELAY: ticks = 4
        0x00,                         // NOTE OFF
        0x9F +  4,                    // DELAY: ticks = 4
        0x00 +  44,                   // NOTE ON: note = 44
        0x9F +  4,                    // DELAY: ticks = 4
        0x00,                         // NOTE OFF
        0x9F +  4,                    // DELAY: ticks = 4
        0xFE,                         // RETURN
      ];

      var player;    // B) Reads music data, controls synthesizer =>
      var synth;     // C) Oscillators generate samples, sends them to converter =>
      var converter; // D) Converts emulated sample rate to system native rate, sends to output =>
      var output;    // E) Plays sample stream, acts as a sink, is thus the source of all system timing.

      // Let's get this show on the road!
      function setup() {
        // Initialize synthesizer
        synth = new SquawkSynth();
        // Initialize audio output
        try {
          output = new WebAudioStream();
          mute.onchange();
        } catch(e) {
          alert(
            "The Web Audio API is not supported in this here browser." + '\n' +
            "You can still work, you just won't get any sound."        + '\n' +
            "Come back using Chrome, FireFox or Safari?"               + '\n' +
            "Sorry for the inconvenience! =)"                          + '\n' +
            ""                                                         + '\n' +
            "With love,"                                               + '\n' +
            "-devs"
          );
          return;
        }
        // Initialize sample rate conversion
        converter = new SampleRateConverter(emulateSampleRate, output.getSampleRate());
        // Initialize player
        player = new SquawkStream(emulateSampleRate);
        player.setSource(music);
        // Build graph [player]=>[synth]=>[converter]=>[output]
        // Output is the sink, and drives/times the entire graph.
        synth.connect(player);
        converter.connect(synth);
        output.connect(converter);
        // Begin playback (?)
        output.play(!pause.checked);
        // Refresh stats every 10mS or so
        setInterval(refreshStats, 10);
      }

      function refreshStats() {
        count.innerHTML = player.getTickCount().toString();
      }

    </script>
  </head>
  <body onload="setup();" style="font-family: Courier New; text-align: center;">
    <h1>HEWNIQUORN TEKKNO MUZAK!</h1>
    <h3>- DEVELOPMENT ZONE FOR SQUAWK 2.0: ATMlib -</h3>
    <img src="https://media.giphy.com/media/112iRUPbOe9DEs/giphy.gif" align="absmiddle"><br><br>
    <span>Ticks: </span><span id="count">0</span><br><br>
    <input type="checkbox" id="mute" onchange="output.setVolume(this.checked ? 0.0 : masterVolume);"> <b>MUTE</b> FOR THE LOVE OF ALL THINGS SACRED!</input><br>
    <input type="checkbox" id="noise"> <b>RETRIG</b> NOISE TEST (WHAT IF U HAD ROBOT EARS?)</input><br>
    <input type="checkbox" id="pause" onchange="output.pause(this.checked);"> <b>PAUSE</b> MAKES THE GEARS STOP TURNING...</input><br>
    <input type="checkbox" id="expriette" onchange="ex1panel.style.display = this.checked ? 'block' : 'none';"> <b>EXPRIETTE</b> (EXPERIMENT ONE)</input><br>
    <div id="ex1panel" style="display:none;">
      Length: <input onchange="synth.setEx1(0, parseInt(this.value));" value="8"><br>
      Start: <input onchange="synth.setEx1(1, parseInt(this.value));" value="16">
    </div>
    
    ...BUT REMEMBER, JOE WILL DANCE INTO ETERNITY!
  </body>
</html>
